package com.mmall.controller.backend;import com.google.common.collect.Maps;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.Product;import com.mmall.pojo.User;import com.mmall.service.IFileService;import com.mmall.service.IProductService;import com.mmall.service.IUserService;import com.mmall.util.PropertiesUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import javax.imageio.IIOParam;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.Map;@Controller@RequestMapping("/manage/product")public class ProductManageController {    @Autowired    private IUserService iUserService;    @Autowired    private IProductService iProductService;    @Autowired    private IFileService iFileService;    @RequestMapping("save.do")    @ResponseBody    public ServerResponse productSave(HttpSession session, Product product) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //填充增加产品的逻辑            return iProductService.saveOrUpdateProduct(product);        } else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("set_sale_status.do")    @ResponseBody    public ServerResponse setSaleStatus(HttpSession session, Integer productId,Integer status) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //填充增加产品的逻辑            return iProductService.setSaleStatus(productId, status);        } else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("detail.do")    @ResponseBody    public ServerResponse getDetail(HttpSession session, Integer productId) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //填充增加产品的逻辑            return iProductService.manageProductDetail(productId);        } else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("list.do")    @ResponseBody    public ServerResponse getList(HttpSession session, @RequestParam(value = "pageNum", defaultValue = "1") int pageNum, @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //填充增加产品的逻辑            return iProductService.getProductList(pageNum, pageSize);        } else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("search.do")    @ResponseBody    public ServerResponse productSearch(HttpSession session,String productName,Integer productId, @RequestParam(value = "pageNum", defaultValue = "1") int pageNum, @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //填充增加产品的逻辑            return iProductService.searchProduct(productName, productId, pageNum, pageSize);        } else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("upload.do")    @ResponseBody    public ServerResponse upload(HttpSession session,@RequestParam(value = "upload_file",required = false) MultipartFile file, HttpServletRequest request) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录！");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //            String path = request.getSession().getServletContext().getRealPath("upload");            String targetFileName = iFileService.upload(file,path);            String url = PropertiesUtil.getProperty("ftp.server.http.prefix")+targetFileName;            Map fileMap = Maps.newHashMap();            fileMap.put("url", "targetFileName");            fileMap.put("url", url);            return ServerResponse.createBySuccess(fileMap);        }else {            return ServerResponse.createByErrorMsg("暂无此项权限进行此操作，请联系管理员！");        }    }    @RequestMapping("richtext_img_upload.do")    @ResponseBody    public Map richtextImgUpload(HttpSession session, @RequestParam(value = "upload_file",required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response) {        Map resultMap = Maps.newHashMap();        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            resultMap.put("success", false);            resultMap.put("msg", "请以管理员用户登录！");            return resultMap;        }        //富文本中对返回值有要求 simditor//        {//            "success": true/false,                        //成功返回true;//                "msg": "error message", # optional            //错误返回错误信息，可不写；//            "file_path": "[real file path]"               //返回保存的路径；//        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //            String path = request.getSession().getServletContext().getRealPath("upload");            String targetFileName = iFileService.upload(file,path);            if (StringUtils.isBlank(targetFileName)) {                resultMap.put("success", false);                resultMap.put("msg", "上传失败！");                return resultMap;            }            String url = PropertiesUtil.getProperty("ftp.server.http.prefix")+targetFileName;            resultMap.put("success", true);            resultMap.put("msg", "上传成功！");            resultMap.put("file_path", url);            response.addHeader("Access-Control-Allow-Headers","X-File-Name");            return resultMap;        }else {            resultMap.put("success", false);            resultMap.put("msg", "暂无此项权限进行此操作，请联系管理员！");            return resultMap;        }    }}