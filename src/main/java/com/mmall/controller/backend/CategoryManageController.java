package com.mmall.controller.backend;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.User;import com.mmall.service.ICategotyService;import com.mmall.service.IUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpSession;@Controller@RequestMapping("/manage/category")public class CategoryManageController {    @Autowired    private IUserService iUserService;    @Autowired    private ICategotyService iCategotyService;    @RequestMapping("add_category.do")    @ResponseBody    public ServerResponse addCategory(HttpSession session, String categoryName,@RequestParam(value = "parentId",defaultValue = "0") int parentId) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(),"用户未登录，请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //如果是管理员，增加处理分类的逻辑            return iCategotyService.addCategory(categoryName,parentId);        } else {            return ServerResponse.createByErrorMsg("暂无权限进行此操作,请联系管理员！");        }    }    @RequestMapping("set_category_name.do")    @ResponseBody    public ServerResponse serCategoryName(HttpSession session, Integer categoryId, String categoryName) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(),"用户未登录，请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //如果是管理员，增加更新分类的逻辑            return iCategotyService.updateCategoryName(categoryId, categoryName);        } else {            return ServerResponse.createByErrorMsg("暂无权限进行此操作,请联系管理员！");        }    }    @RequestMapping("get_category.do")    @ResponseBody    public ServerResponse getChildrenParallelCategory(HttpSession session,@RequestParam(value = "categoryId",defaultValue = "0")Integer categoryId) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(),"用户未登录，请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //如果是管理员，查询子节点信息，不递归            return iCategotyService.getChildrenParallelCategory(categoryId);        } else {            return ServerResponse.createByErrorMsg("暂无权限进行此操作,请联系管理员！");        }    }    @RequestMapping("get_deep_category.do")    @ResponseBody    public ServerResponse getCategoryAndDeepChildrenCategory(HttpSession session,@RequestParam(value = "categoryId",defaultValue = "0")Integer categoryId) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.NEED_LOGIN.getCode(),"用户未登录，请登录");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            //如果是管理员，查询当前节点的ID和递归子节点的ID            return iCategotyService.selectCategoryAndChildrenById(categoryId);        } else {            return ServerResponse.createByErrorMsg("暂无权限进行此操作,请联系管理员！");        }    }}