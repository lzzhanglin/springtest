package com.mmall.service.impl;import com.google.common.base.Splitter;import com.google.common.collect.Lists;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.dao.CartMapper;import com.mmall.dao.ProductMapper;import com.mmall.pojo.Cart;import com.mmall.pojo.Product;import com.mmall.service.ICartService;import com.mmall.util.BigDecimalUtil;import com.mmall.util.PropertiesUtil;import com.mmall.vo.CartProductVo;import com.mmall.vo.CartVo;import net.sf.jsqlparser.schema.Server;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.List;@Service("iCartService")public class CartServiceImpl implements ICartService {    @Autowired    private CartMapper cartMapper;    @Autowired    private ProductMapper productMapper;    public ServerResponse<CartVo> add(Integer userId,Integer productId,Integer count) {        if (productId == null || count == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.ILLEGAL_ARGUMENT.getCode(),                    ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Cart cart = cartMapper.selectCartByUserIdProductId(userId, productId);        if (cart == null) {            //产品不在购物车里，新增一条记录            Cart cartItem = new Cart();            cartItem.setQuantity(count);            cartItem.setChecked(Const.Cart.CHECKED);            cartItem.setProductId(productId);            cartItem.setUserId(userId);            cartMapper.insert(cartItem);        } else {            //此项商品在购物车中已存在            count = cart.getQuantity()+count;            cart.setQuantity(count);            cartMapper.updateByPrimaryKeySelective(cart);        }        return this.list(userId);    }    public ServerResponse<CartVo> update(Integer userId, Integer productId, Integer count) {        if (productId == null || count == null) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.ILLEGAL_ARGUMENT.getCode(),                    ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Cart cart = cartMapper.selectCartByUserIdProductId(userId, productId);        if (cart != null) {            cart.setQuantity(count);        }        cartMapper.updateByPrimaryKeySelective(cart);        return this.list(userId);    }    public ServerResponse<CartVo> deleteProduct(Integer userId, String productIds) {        List<String> productIdList = Splitter.on(",").splitToList(productIds);        if (CollectionUtils.isEmpty(productIdList)) {            return ServerResponse.createByErrorCodeMsg(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        cartMapper.deleteByUserIdProductIds(userId,productIdList);        return this.list(userId);    }    public ServerResponse<CartVo> list(Integer userId) {        CartVo cartVo = this.getCartVoLimit(userId);        return ServerResponse.createBySuccess(cartVo);    }    public ServerResponse<CartVo> selectOrCancel(Integer userId,Integer productId,Integer checked) {        cartMapper.checkedOrUncheckedProduct(userId,productId,checked);        return this.list(userId);    }    public ServerResponse<Integer> getCartProductCount(Integer userId) {        if (userId == null) {            return ServerResponse.createBySuccess(0);        }        return ServerResponse.createBySuccess(cartMapper.selectCartProductCount(userId));    }    private CartVo getCartVoLimit(Integer userId) {        CartVo cartVo = new CartVo();        List<Cart> cartList = cartMapper.selectCartByUserId(userId);        List<CartProductVo> cartProductVoList = Lists.newArrayList();        BigDecimal cartTotalPrice = new BigDecimal("0");        if (CollectionUtils.isNotEmpty(cartList)) {            for (Cart cartItem : cartList) {                CartProductVo cartProductVo = new CartProductVo();                cartProductVo.setId(cartItem.getId());                cartProductVo.setUserId(cartItem.getUserId());                cartProductVo.setProductId(cartItem.getProductId());                Product product = productMapper.selectByPrimaryKey(cartItem.getProductId());                //产品不为空                if (product != null) {                    cartProductVo.setProductMainImage(product.getMainImage());                    cartProductVo.setProductName(product.getName());                    cartProductVo.setProductSubtitle(product.getSubtitle());                    cartProductVo.setProductStatus(product.getStatus());                    cartProductVo.setProductPrice(product.getPrice());                    cartProductVo.setProductStock(product.getStock());                    int buyLimit = 0;                    if (product.getStock() >= cartItem.getQuantity()) {                        buyLimit = cartItem.getQuantity();                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_SUCCESS);                    } else {                        buyLimit = product.getStock();                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_FAIL);                        Cart cartForQuantity = new Cart();                        cartForQuantity.setId(cartItem.getId());                        cartForQuantity.setQuantity(buyLimit);                        cartMapper.updateByPrimaryKeySelective(cartForQuantity);                    }                    cartProductVo.setQuantity(buyLimit);                    //计算单项产品的总价                    cartProductVo.setProductTotalPrice(BigDecimalUtil.mul(                            product.getPrice().doubleValue(),                            cartProductVo.getQuantity()));                    cartProductVo.setProductChecked(cartItem.getChecked());                }                if (cartItem.getChecked() == Const.Cart.CHECKED) {                    //如果勾选                    cartTotalPrice = BigDecimalUtil.add(cartTotalPrice.doubleValue(), cartProductVo.getProductTotalPrice().doubleValue());                }                cartProductVoList.add(cartProductVo);            }        }        cartVo.setCartTotalPrice(cartTotalPrice);        cartVo.setCartProductVoList(cartProductVoList);        cartVo.setAllChecked(this.getAllCheckedStatus(userId));        cartVo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix"));        return cartVo;    }    private boolean getAllCheckedStatus(Integer userId) {        if (userId == null) {            return false;        }        return cartMapper.selectCartProductCheckedStatusByUserId(userId) == 0;    }}